import 'dart:async';import 'package:flutter/material.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:myapp/core/models/user_profile_model.dart';import 'package:myapp/core/services/auth_service.dart';import 'package:myapp/core/services/firestore_service.dart';
enum AuthStatus{uninitialized,authenticated,authenticating,unauthenticated}
class AuthProvider with ChangeNotifier{final AuthService _authService=AuthService();final FirestoreService _firestoreService=FirestoreService();StreamSubscription?_authStateSubscription;AuthStatus _status=AuthStatus.uninitialized;User?_firebaseUser;UserProfile?_userProfile;AuthStatus get status=>_status;User?get firebaseUser=>_firebaseUser;UserProfile?get userProfile=>_userProfile;AuthProvider(){_authStateSubscription=_authService.authStateChanges.listen(_onAuthStateChanged);}Future<void>_onAuthStateChanged(User?user)async{if(user==null){_status=AuthStatus.unauthenticated;_firebaseUser=null;_userProfile=null;}else{_firebaseUser=user;_userProfile=await _firestoreService.getUserProfile(user.uid);_status=AuthStatus.authenticated;}notifyListeners();}Future<bool>signIn(String nickname)async{_status=AuthStatus.authenticating;notifyListeners();final userCredential=await _authService.signInAnonymously(nickname);if(userCredential!=null&&userCredential.user!=null){await _firestoreService.setUserProfile(uid:userCredential.user!.uid,nickname:nickname,email:'anonymous@duelo.metabolico');return true;}else{_status=AuthStatus.unauthenticated;notifyListeners();return false;}}Future<void>signOut()async{await _authService.signOut();}@override void dispose(){_authStateSubscription?.cancel();super.dispose();}}
